<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C#基础知识</title>
      <link href="/2023/04/26/Csharp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/04/26/Csharp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="一、认识-C"><a href="#一、认识-C" class="headerlink" title="一、认识 C"></a>一、认识 C</h1><h2 id="1-1-什么是-NET？"><a href="#1-1-什么是-NET？" class="headerlink" title="1.1 什么是 .NET？"></a>1.1 什么是 .NET？</h2><p>.NET 是由 Microsoft 创建的开源开发人员平台，用于生成许多不同类型的应用程序。使用 .NET，可以使用多种语言、编辑器和库来构建 Web、移动、桌面、游戏和 IoT 等。<a href="https://learn.microsoft.com/zh-cn/dotnet/">.NET 文档 | Microsoft Learn</a>。</p><ul><li><p>编程语言</p><p>  ​    可以使用 C#、F# 或 Visual Basic 编写 .NET 应用。<a href="https://dotnet.microsoft.com/zh-cn/languages">了解.NET 编程语言</a>。</p><ul><li>C# 是一种简单、现代、面向对象和类型安全的编程语言。</li><li><p>F# 是一种编程语言，利用它可轻松编写简洁、可靠且性能出色的代码。</p></li><li><p>Visual Basic 是一种易于使用的语言，简单语法便于生成类型安全、面向对象的应用。</p></li></ul></li><li><p>跨平台</p><p>  ​    无论是使用 C#、F# 还是 Visual Basic，代码都会在任何兼容的操作系统上本机运行。可以使用 .NET 生成多种类型的应用。有些是跨平台的，有些则针对特定的一组操作系统和设备。</p></li><li><p>一致的 API</p><p>  ​        .NET 提供一组标准的基类库和 API，这些库和 API 对所有 .NET 应用程序都是通用的。每个应用模型还可以公开特定于其运行的操作系统或它提供的功能的其他 API。例如，ASP.NET 是跨平台 Web 框架，它提供用于生成在 Linux 或 Windows 上运行的 Web 应用的其他 API。</p></li><li><p>库</p><p>  ​    为了扩展功能，Microsoft 和其他公司维护着一个正常的 .NET软件包生态系统。<a href="https://nuget.org/">NuGet</a>是专为包含了 100,000 多个包的 .NET 构建的包管理器。</p></li><li><p>应用程序模型</p><p>  ​    可以使用 .NET 生成多种类型的应用。为了帮助你更快地生成应用，应用模型基于基础库构建。</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">Web</th><th>为 Windows、Linux、macOS、Docker 构建 Web 应用和服务。</th></tr></thead><tbody><tr><td style="text-align:center">手机</td><td>使用单一代码库生成适用于 iOS、Android 和 Windows 等的本机移动应用。</td></tr><tr><td style="text-align:center">桌面</td><td>创建适用于 Windows 和 macOS 的本机应用，或使用 Web 技术生成随时随地运行的应用。</td></tr><tr><td style="text-align:center">微服务</td><td>创建可在 Docker 容器上运行的可独立部署的微服务。</td></tr><tr><td style="text-align:center">云</td><td>使用现有云服务，或创建和部署自己的云服务。</td></tr><tr><td style="text-align:center">机器学习</td><td>为应用添加视觉算法、语音处理、预测模型等。</td></tr><tr><td style="text-align:center">游戏开发</td><td>为最热门的台式机、手机和控制台开发 2D 和 3D 游戏。</td></tr><tr><td style="text-align:center">物联网</td><td>使用 Raspberry Pi 和其他单板计算机的本机支持创建 IoT 应用。</td></tr></tbody></table></div><h2 id="1-2-什么是-C-？"><a href="#1-2-什么是-C-？" class="headerlink" title="1.2 什么是 C#？"></a>1.2 什么是 C#？</h2><p>一种编程语言，可以开发基于.NET 平台的应用。</p><h2 id="1-3-NET两种交互模式"><a href="#1-3-NET两种交互模式" class="headerlink" title="1.3 .NET两种交互模式"></a>1.3 .NET两种交互模式</h2><ul><li>C/S：客户端（Client）/服务器（Server） 模式（需安装客户端软件）</li><li>B/S：浏览器（Browser）/服务器 模式（只需要浏览器）</li></ul><h2 id="1-4-开发工具"><a href="#1-4-开发工具" class="headerlink" title="1.4 开发工具"></a>1.4 开发工具</h2><ul><li><a href="https://visualstudio.microsoft.com/">Visual Studio</a></li></ul><h1 id="二、C-语法基础"><a href="#二、C-语法基础" class="headerlink" title="二、C#语法基础"></a>二、C#语法基础</h1><h2 id="2-1-C-程序一般结构"><a href="#2-1-C-程序一般结构" class="headerlink" title="2.1 C#程序一般结构"></a>2.1 C#程序一般结构</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System; <span class="comment">//调用命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//项目开始的地方</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line"><span class="comment">//构造命名空间，作用：区别相同名称但是作用不同的类</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">YourNamespace</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//构造类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">YourClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//字段</span></span><br><span class="line">        <span class="comment">//属性</span></span><br><span class="line">        <span class="comment">//构造方法</span></span><br><span class="line">        <span class="comment">//方法或函数</span></span><br><span class="line">        <span class="comment">//析构函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义结构体变量</span></span><br><span class="line">    <span class="keyword">struct</span> YourStruct</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义接口</span></span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IYourInterface</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义委托类型</span></span><br><span class="line">    <span class="function"><span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">YourDelegate</span>()</span>;</span><br><span class="line">    <span class="comment">//枚举类型变量</span></span><br><span class="line">    <span class="built_in">enum</span> YourEnum</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//子命名空间</span></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title">YourNestedNamespace</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">struct</span> YourStruct</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>代码中出现的所有标点都是英文半角；</li><li>在 C# 代码中，每行代码的结束，都以<strong>分号</strong>结束。</li></ol><h2 id="2-2-注释"><a href="#2-2-注释" class="headerlink" title="2.2 注释"></a>2.2 注释</h2><ol><li><p>单行注释</p><p>​    一般放在<strong>代码语句</strong>的后面，或者放在<strong>代码块</strong>的前面。基本语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a;<span class="comment">//定义变量a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义变量 b，c</span></span><br><span class="line"><span class="built_in">int</span> b;</span><br><span class="line"><span class="built_in">int</span> c;</span><br></pre></td></tr></table></figure></li><li><p>多行注释</p><p>​    基本语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Console.WriteLine();</span></span><br><span class="line"><span class="comment">Console.ReadKey();</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>文本注释</p><p> ​    多用来解释类或方法的功能及参数。基本语法如下：</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span>text</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="2-3-基本数据类型"><a href="#2-3-基本数据类型" class="headerlink" title="2.3 基本数据类型"></a>2.3 基本数据类型</h2><p>在 C# 中，变量分为以下几种类型：</p><ul><li>值类型</li><li>引用类型</li><li>指针类型</li></ul><h3 id="2-3-1-值类型"><a href="#2-3-1-值类型" class="headerlink" title="2.3.1 值类型"></a>2.3.1 值类型</h3><p>​    它们是从类 <code>System.ValueType</code> 中派生的。值类型变量可以直接分配给一个值，即当前变量所在地址里的数据就是当前变量的值。值类型直接包含数据。</p><div class="table-container"><table><thead><tr><th style="text-align:center">关键字</th><th>描述</th><th>范围</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td style="text-align:center">sbyte</td><td>8 位有符号整数类型</td><td>-128 到 127</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">short</td><td>16 位有符号整数类型</td><td>-32,768 到 32,767</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"><strong>int</strong></td><td>32 位有符号整数类型</td><td>-2,147,483,648 到 2,147,483,647</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">long</td><td>64 位有符号整数类型</td><td>-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td><td style="text-align:center">0L</td></tr><tr><td style="text-align:center">byte</td><td>8 位无符号整数</td><td>0 到 255</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">ushort</td><td>16 位无符号整数类型</td><td>0 到 65,535</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">uint</td><td>32 位无符号整数类型</td><td>0 到 4,294,967,295</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">ulong</td><td>64 位无符号整数类型</td><td>0 到 18,446,744,073,709,551,615</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">float</td><td>32 位单精度浮点型</td><td>-3.4 x 1038 到 + 3.4 x 1038</td><td style="text-align:center">0.0F</td></tr><tr><td style="text-align:center">double</td><td>64 位双精度浮点型</td><td>(+/-)5.0 x 10-324 到 (+/-)1.7 x 10308</td><td style="text-align:center">0.0D</td></tr><tr><td style="text-align:center">decimal</td><td>128 位精确的十进制值，28-29 有效位数</td><td>(-7.9 x 1028 到 7.9 x 1028) / 100 到 28</td><td style="text-align:center">0.0M</td></tr><tr><td style="text-align:center">char</td><td>16 位 Unicode 字符</td><td>U +0000 到 U +ffff</td><td style="text-align:center">‘\0’</td></tr><tr><td style="text-align:center">bool</td><td>布尔值</td><td>true 或 false</td><td style="text-align:center">False</td></tr></tbody></table></div><blockquote><p>字符不可为空，字符只能存一个字符。</p></blockquote><p>如需得到一个类型或一个变量在特定平台上的准确字节大小，可以使用 <code>sizeof()</code> 方法。下面举例获取任何机器上 <code>int</code> 类型的字节大小：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DataTypeApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="keyword">sizeof</span>(<span class="built_in">int</span>));<span class="comment">//</span></span><br><span class="line">         Console.ReadLine();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值类型还包括<a href="#4-3-枚举">枚举</a>和结构体。</p><h3 id="2-3-1-引用类型"><a href="#2-3-1-引用类型" class="headerlink" title="2.3.1 引用类型"></a>2.3.1 引用类型</h3><p>引用类型变量不包含存储在变量中的实际数据，但它们包含对变量的引用（地址）。换句话说，<strong>它们实际存储的是一个地址（栈区）</strong>，并指向变量的实际值所在的内存空间（堆区）。内置的引用类型有：<code>object</code>、<code>dynamic</code>和<code>string</code>。</p><ul><li><p>对象（Object）类型</p><p>  ​        <strong>对象</strong>：是所有数据类型的终极基类。Object 是 System.Object 类的别名。所以对象（Object）类型可以被分配任何其他类型（值类型、引用类型、预定义类型或用户自定义类型）的值。但是，在分配值之前，需要先进行类型转换。</p><ul><li>当一个值类型转换为对象类型时，则被称为<strong>装箱</strong>；</li><li>当一个对象类型转换为值类型时，则被称为<strong>拆箱</strong>。</li></ul></li><li><p>动态（Dynamic）类型</p><p>  ​    任何类型的值可以存储在动态数据类型变量中。这些变量的类型检查是在运行时发生的。声明动态类型的语法：</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dynamic &lt;variable_name&gt; = value;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dynamic</span> d = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>  ​    </p></li><li><p>字符串（String）类型</p><p>​    <strong>字符串（String）类型</strong>：允许您给变量分配任何字符串值。字符串（String）类型是 System.String 类的别名。它是从对象（Object）类型派生的。</p></li></ul><h3 id="2-3-3-指针类型"><a href="#2-3-3-指针类型" class="headerlink" title="2.3.3 指针类型"></a>2.3.3 指针类型</h3><p>指针类型变量存储另一种类型的内存地址。C# 中的指针与 C 或 C++ 中的指针有相同的功能。声明指针类型的语法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type* name;</span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line"><span class="built_in">char</span>* cp;</span><br><span class="line"><span class="built_in">int</span>* ip;</span><br></pre></td></tr></table></figure><blockquote><p>指针具体的使用，请参照<a href="">不安全代码</a></p></blockquote><h3 id="2-3-4-数据类型的转换"><a href="#2-3-4-数据类型的转换" class="headerlink" title="2.3.4 数据类型的转换"></a>2.3.4 数据类型的转换</h3><p>数据类型的转换有两种：<strong>隐式类型转换</strong>和<strong>显式类型转换</strong>。前者是自动进行，而后者是强制进行。</p><ul><li><p>隐式类型转换</p><p>  ​    需要满足的条件是：两种兼容类型；目标类型等级高于源类型。例如：int 和 double 兼容（都是数字类型），而 double &gt; int 。</p></li><li><p>显式类型转换</p><ul><li><p>兼容类型</p><p>  ​    高阶转换成低阶，可能会造成数据丢失。例如：</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> num = <span class="number">521.1314</span>;</span><br><span class="line"><span class="built_in">int</span> num_1;</span><br><span class="line">num_1 = (<span class="built_in">int</span>)num;<span class="comment">//此时 num_1 的值为 521</span></span><br></pre></td></tr></table></figure><blockquote><p>​    注意：浮点型向整型转换时，会直接<strong>舍弃</strong>小数部分</p></blockquote></li><li><p>不兼容类型/Convert类型转换</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line"><span class="built_in">double</span> num;</span><br><span class="line">num = Convert.ToDouble(str);</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>    &gt; 转换的内容必须合理，比如 `14A` 中的 `A`不能转换成数字。</code></pre><ul><li><p><code>Convert</code>类型转换对应的所有方法如下：</p><p>  |   方法名   | 描述                                                         |<br>  | :————: | :—————————————————————————————- |<br>  | ToBoolean  | 如果可能的话，把类型转换为布尔型。                           |<br>  |   ToByte   | 如果可能的话，把类型转换为字节类型。                         |<br>  |   ToChar   | 如果可能的话，把类型转换为单个 Unicode 字符类型。            |<br>  | ToDateTime | 如果可能的话，把类型（整数或字符串类型）转换为 日期-时间 结构。 |<br>  | ToDecimal  | 如果可能的话，把浮点型或整数类型转换为十进制类型。           |<br>  |  ToDouble  | 如果可能的话，把类型转换为双精度浮点型。                     |<br>  |  ToInt16   | 如果可能的话，把类型转换为 16 位整数类型。                   |<br>  |  ToInt32   | 如果可能的话，把类型转换为 32 位整数类型。                   |<br>  |  ToInt64   | 如果可能的话，把类型转换为 64 位整数类型。                   |<br>  |  ToSbyte   | 如果可能的话，把类型转换为有符号字节类型。                   |<br>  |  ToSingle  | 如果可能的话，把类型转换为小浮点数类型。                     |<br>  |  ToString  | 如果可能的话，把类型转换为字符串类型。                       |<br>  |   ToType   | 如果可能的话，把类型转换为指定类型。                         |<br>  |  ToUInt16  | 如果可能的话，把类型转换为 16 位无符号整数类型。             |<br>  |  ToUInt32  | 如果可能的话，把类型转换为 32 位无符号整数类型。             |<br>  |  ToUInt64  | 如果可能的话，把类型转换为 64 位无符号整数类型。             |</p></li></ul><h2 id="2-4-运算符"><a href="#2-4-运算符" class="headerlink" title="2.4 运算符"></a>2.4 运算符</h2><p>运算符是一种告诉编译器执行特定的数学或逻辑操作的符号。分类如下：</p><ul><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>位运算符</li><li>赋值运算符</li><li>其他运算符</li></ul><h3 id="2-4-1-算数运算符"><a href="#2-4-1-算数运算符" class="headerlink" title="2.4.1 算数运算符"></a>2.4.1 算数运算符</h3><div class="table-container"><table><thead><tr><th style="text-align:center">加</th><th style="text-align:center">减</th><th style="text-align:center">乘</th><th style="text-align:center">除</th><th style="text-align:center">取余</th><th style="text-align:center">自增</th><th style="text-align:center">自减</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">-</td><td style="text-align:center">*</td><td style="text-align:center">/</td><td style="text-align:center">%</td><td style="text-align:center">++</td><td style="text-align:center">—</td></tr></tbody></table></div><p>自增和自减有两种，前置和后置。分别对应如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> i;</span><br><span class="line">i++;</span><br><span class="line">++i;</span><br></pre></td></tr></table></figure><p>二者的区别是：</p><ul><li><code>++i</code>：表示取<code>i</code>的地址，增加它的内容，然后把值放在寄存器中（<strong>先加后用</strong>）</li><li><code>i++</code>：表示取<code>i</code>的地址，把它的值装入寄存器，然后增加内存中的a的值（<strong>先用后加</strong>）</li></ul><p><strong>而前置自增 (<code>++i</code>) 通常要比后置自增 (<code>i++</code>) 效率更高</strong>。理由如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前置++</span></span><br><span class="line">Age&amp; <span class="keyword">operator</span>++() </span><br><span class="line">&#123;</span><br><span class="line">    ++i</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后置++</span></span><br><span class="line"><span class="keyword">const</span> Age <span class="keyword">operator</span>++(<span class="built_in">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Age tmp = *<span class="keyword">this</span>;</span><br><span class="line">    ++(*<span class="keyword">this</span>);  <span class="comment">//利用前置++</span></span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>前置直接对源数据进行加 1 操作；而后置需要先创建一个临时变量，源数据保存一个副本后，再加 1 </li><li>时间上来看：后置的语句更多，占用的时间更多</li><li>空间上来看：后置需要创建临时变量（用完释放），因此占用的内存更多</li></ul><h3 id="2-4-2-关系运算符"><a href="#2-4-2-关系运算符" class="headerlink" title="2.4.2 关系运算符"></a>2.4.2 关系运算符</h3><p>下表显示了 C# 支持的所有关系运算符。假设变量 <strong>A</strong> 的值为 10，变量 <strong>B</strong> 的值为 20，则：</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:left">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">==</td><td style="text-align:left">检查两个操作数的值是否相等，如果相等则条件为真。</td><td style="text-align:center">(A == B) 不为真。</td></tr><tr><td style="text-align:center">!=</td><td style="text-align:left">检查两个操作数的值是否相等，如果不相等则条件为真。</td><td style="text-align:center">(A != B) 为真。</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:left">检查左操作数的值是否大于右操作数的值，如果是则条件为真。</td><td style="text-align:center">(A &gt; B) 不为真。</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:left">检查左操作数的值是否小于右操作数的值，如果是则条件为真。</td><td style="text-align:center">(A &lt; B) 为真。</td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:left">检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。</td><td style="text-align:center">(A &gt;= B) 不为真。</td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:left">检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。</td><td style="text-align:center">(A &lt;= B) 为真。</td></tr></tbody></table></div><h3 id="2-4-3-逻辑运算符"><a href="#2-4-3-逻辑运算符" class="headerlink" title="2.4.3 逻辑运算符"></a>2.4.3 逻辑运算符</h3><p>下表显示了 C# 支持的所有逻辑运算符。假设变量 A 为布尔值 true，变量 B 为布尔值 false，则：</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:left">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">&amp;&amp;</td><td style="text-align:left">称为逻辑与运算符。如果两个操作数都非零，则条件为真。</td><td style="text-align:center">(A &amp;&amp; B) 为假。</td></tr><tr><td style="text-align:center">\</td><td style="text-align:left">\</td><td style="text-align:center"></td><td>称为逻辑或运算符。如果两个操作数中有任意一个非零，则条件为真。</td><td>(A \</td><td>\</td><td>B) 为真。</td></tr><tr><td style="text-align:center">!</td><td style="text-align:left">称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。</td><td style="text-align:center">!(A &amp;&amp; B) 为真。</td></tr></tbody></table></div><h3 id="2-4-4-位运算符"><a href="#2-4-4-位运算符" class="headerlink" title="2.4.4 位运算符"></a>2.4.4 位运算符</h3><p>位逻辑运算符作用于位，并逐位执行操作。&amp;、 | 和 ^ 的真值表如下所示：</p><div class="table-container"><table><thead><tr><th style="text-align:center">p</th><th style="text-align:center">q</th><th style="text-align:center">p &amp; q</th><th style="text-align:center">p \</th><th style="text-align:center">q</th><th>p ^ q</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table></div><p>以及位操作符：</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">&amp;</td><td style="text-align:left">如果同时存在于两个操作数中，二进制 AND 运算符复制一位到结果中。</td><td style="text-align:left">(A &amp; B) 将得到 12，即为 0000 1100</td></tr><tr><td style="text-align:center">\</td><td style="text-align:left"></td><td style="text-align:left">如果存在于任一操作数中，二进制 OR 运算符复制一位到结果中。</td><td>(A \</td><td>B) 将得到 61，即为 0011 1101</td></tr><tr><td style="text-align:center">^</td><td style="text-align:left">如果存在于其中一个操作数中但不同时存在于两个操作数中，二进制异或运算符复制一位到结果中。</td><td style="text-align:left">(A ^ B) 将得到 49，即为 0011 0001</td></tr><tr><td style="text-align:center">~</td><td style="text-align:left">二进制补码运算符是一元运算符，具有”翻转”位效果。</td><td style="text-align:left">(~A ) 将得到 -61，即为 1100 0011，2 的补码形式，带符号的二进制数。</td></tr><tr><td style="text-align:center">&lt;&lt;</td><td style="text-align:left">二进制左移运算符。左操作数的值向左移动右操作数指定的位数。</td><td style="text-align:left">A &lt;&lt; 2 将得到 240，即为 1111 0000</td></tr><tr><td style="text-align:center">&gt;&gt;</td><td style="text-align:left">二进制右移运算符。左操作数的值向右移动右操作数指定的位数。</td><td style="text-align:left">A &gt;&gt; 2 将得到 15，即为 0000 1111</td></tr></tbody></table></div><h3 id="2-4-5-赋值运算符"><a href="#2-4-5-赋值运算符" class="headerlink" title="2.4.5 赋值运算符"></a>2.4.5 赋值运算符</h3><p>下表列出了 C# 支持的赋值运算符：</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:left">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:left">简单的赋值运算符，把右边操作数的值赋给左边操作数</td><td style="text-align:center">C = A + B 将把 A + B 的值赋给 C</td></tr><tr><td style="text-align:center">+=</td><td style="text-align:left">加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数</td><td style="text-align:center">C += A 相当于 C = C + A</td></tr><tr><td style="text-align:center">-=</td><td style="text-align:left">减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数</td><td style="text-align:center">C -= A 相当于 C = C - A</td></tr><tr><td style="text-align:center">*=</td><td style="text-align:left">乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数</td><td style="text-align:center">C <em>= A 相当于 C = C </em> A</td></tr><tr><td style="text-align:center">/=</td><td style="text-align:left">除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数</td><td style="text-align:center">C /= A 相当于 C = C / A</td></tr><tr><td style="text-align:center">%=</td><td style="text-align:left">求模且赋值运算符，求两个操作数的模赋值给左边操作数</td><td style="text-align:center">C %= A 相当于 C = C % A</td></tr><tr><td style="text-align:center">&lt;&lt;=</td><td style="text-align:left">左移且赋值运算符</td><td style="text-align:center">C &lt;&lt;= 2 等同于 C = C &lt;&lt; 2</td></tr><tr><td style="text-align:center">&gt;&gt;=</td><td style="text-align:left">右移且赋值运算符</td><td style="text-align:center">C &gt;&gt;= 2 等同于 C = C &gt;&gt; 2</td></tr><tr><td style="text-align:center">&amp;=</td><td style="text-align:left">按位与且赋值运算符</td><td style="text-align:center">C &amp;= 2 等同于 C = C &amp; 2</td></tr><tr><td style="text-align:center">^=</td><td style="text-align:left">按位异或且赋值运算符</td><td style="text-align:center">C ^= 2 等同于 C = C ^ 2</td></tr><tr><td style="text-align:center">\</td><td style="text-align:left">=</td><td style="text-align:center">按位或且赋值运算符</td><td>C \</td><td>= 2 等同于 C = C \</td><td>2</td></tr></tbody></table></div><h3 id="2-4-6-其他运算符"><a href="#2-4-6-其他运算符" class="headerlink" title="2.4.6 其他运算符"></a>2.4.6 其他运算符</h3><p>下表列出了 C# 支持的其他一些重要的运算符：</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">sizeof()</td><td style="text-align:left">返回数据类型的大小。</td><td style="text-align:left">sizeof(int)，将返回 4.</td></tr><tr><td style="text-align:center">typeof()</td><td style="text-align:left">返回变量的类型。</td><td style="text-align:left">typeof(StreamReader);</td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:left">返回变量的地址。</td><td style="text-align:left">&a; 将得到变量的实际地址。</td></tr><tr><td style="text-align:center">*</td><td style="text-align:left">变量的指针。</td><td style="text-align:left">*a; 将指向一个变量。</td></tr><tr><td style="text-align:center">? :</td><td style="text-align:left">条件表达式</td><td style="text-align:left">如果条件为真 ? 则为 X : 否则为 Y</td></tr><tr><td style="text-align:center">is</td><td style="text-align:left">判断当前对象是否为XXX类型</td><td style="text-align:left">返回ture 或 false</td></tr><tr><td style="text-align:center">as</td><td style="text-align:left">强制转换，即使转换失败也不会抛出异常。</td><td style="text-align:left">转换成功，返回转换后的对象；反之，返回 NULL</td></tr></tbody></table></div><h2 id="2-5-特殊字符"><a href="#2-5-特殊字符" class="headerlink" title="2.5 特殊字符"></a>2.5 特殊字符</h2><h3 id="2-5-1-转义字符"><a href="#2-5-1-转义字符" class="headerlink" title="2.5.1 转义字符"></a>2.5.1 转义字符</h3><p><code>\\</code> + <code>特殊字符</code> = <code>具有特殊意义的字符</code>。例如下表所示：</p><div class="table-container"><table><thead><tr><th style="text-align:center">转义符</th><th style="text-align:center">字符名</th></tr></thead><tbody><tr><td style="text-align:center">\‘</td><td style="text-align:center">单引号</td></tr><tr><td style="text-align:center">\“</td><td style="text-align:center">双引号</td></tr><tr><td style="text-align:center">\\</td><td style="text-align:center">反斜杠</td></tr><tr><td style="text-align:center">\0</td><td style="text-align:center">空字符</td></tr><tr><td style="text-align:center">\a</td><td style="text-align:center">感叹号</td></tr><tr><td style="text-align:center">\b</td><td style="text-align:center">退格</td></tr><tr><td style="text-align:center">\f</td><td style="text-align:center">换页</td></tr><tr><td style="text-align:center">\n</td><td style="text-align:center">新行</td></tr><tr><td style="text-align:center">\r</td><td style="text-align:center">回车</td></tr><tr><td style="text-align:center">\t</td><td style="text-align:center">水平tab</td></tr><tr><td style="text-align:center">\v</td><td style="text-align:center">垂直tab</td></tr></tbody></table></div><h3 id="2-5-2-符"><a href="#2-5-2-符" class="headerlink" title="2.5.2  @ 符"></a>2.5.2  @ 符</h3><ol><li>取消字符串中转义字符的转义作用。用在字符串前时，字符串里面的转义字符不转义。将字符串按照原格式输出。</li></ol><h3 id="2-5-3-符"><a href="#2-5-3-符" class="headerlink" title="2.5.3  + 符"></a>2.5.3  + 符</h3><ul><li><p>当<code>+</code>两边至少有一边为字符串时，作用为拼接字符串的作用</p><p>  ​    具体语法如下：</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> name = <span class="string">&quot;AAAAA&quot;</span>;</span><br><span class="line"><span class="built_in">int</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">string</span> email = <span class="string">&quot;XXXXX@xx.com&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> address = <span class="string">&quot;SSSSS&quot;</span>;</span><br><span class="line"><span class="built_in">int</span> salary = <span class="number">10000</span>;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;我叫&quot;</span> + name + <span class="string">&quot;，今年&quot;</span> + age + <span class="string">&quot;岁了，邮箱是：&quot;</span> + email + <span class="string">&quot;,住在&quot;</span> + address + <span class="string">&quot;,每月的收入是&quot;</span> + salary + <span class="string">&quot;日元&quot;</span>);</span><br><span class="line">Console.ReadKey();</span><br></pre></td></tr></table></figure><p>  ​    </p></li><li><p>数字相加</p><p>  具体语法如下：</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> num_1 = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> num_2 = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">int</span> num_3 = num_1 + num_2;</span><br><span class="line">Console.WriteLine(num_3);</span><br></pre></td></tr></table></figure><p>  ​    </p></li></ul><h3 id="2-5-4-占位符"><a href="#2-5-4-占位符" class="headerlink" title="2.5.4 占位符"></a>2.5.4 占位符</h3><p>用在字符串内，增强代码的可读性。具体语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">int</span> c = <span class="number">3</span>;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;第一个数字是：&quot;</span> + a + <span class="string">&quot;，第二个数字是：&quot;</span> + b + <span class="string">&quot;，第三个数字是：&quot;</span> + c);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;第一个数字是：&#123;0&#125;，第二个数字是：&#123;1&#125;，第三个数字是：&#123;2&#125;&quot;</span>,a,b,c);</span><br></pre></td></tr></table></figure><p>使用注意：</p><ul><li>挖几个坑，就要填几个坑。如果多填，不报错但没效果；如果少填，就会异常（语法没错误，只不过在程序运行期间，由于某些原因出现问题，使程序不在正常的运行）</li><li>输出顺序{0}，{1}，{2}… 对应 a, b, c, ….</li></ul><h2 id="2-6-可空类型💖💖💖"><a href="#2-6-可空类型💖💖💖" class="headerlink" title="2.6 可空类型💖💖💖"></a>2.6 可空类型💖💖💖</h2><p>在 C# 中，值类型例如 int 的默认值是 0 ，同时也不能进 <code>a = null</code> 的赋值操作。一般情况下所有 <code>if( a != null)</code> 永远为真。</p><p>C# 提供了一个特殊的数据类型，<code>nullable</code> 类型（<strong>可空类型</strong>），可空类型可以表示其基础值类型正常范围内的值，再加上一个 null 值。</p><p><code>?</code> 单问号用于对 <code>int、double、bool</code>等无法直接赋值为 <code>null</code> 的数据类型进行 <code>null</code> 的赋值</p><h3 id="2-6-1-定义可空类型"><a href="#2-6-1-定义可空类型" class="headerlink" title="2.6.1 定义可空类型"></a>2.6.1 定义可空类型</h3><p>语法如下：声明一个 <code>nullable</code> 类型（可空类型）的语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;data_type&gt;? &lt;variable_name&gt; = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>? i = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h3 id="2-6-2-null-合并运算符（-）"><a href="#2-6-2-null-合并运算符（-）" class="headerlink" title="2.6.2 null 合并运算符（ ?? ）"></a>2.6.2 null 合并运算符（ ?? ）</h3><p><code>null</code>合并运算符用于定义<strong>可空类型</strong>和<strong>引用类型</strong>的默认值。<strong>null 合并运算符为类型转换定义了一个预设值，以防可空类型的值为 null</strong>。下面的实例演示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CalculatorApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">NullablesAtShow</span></span><br><span class="line">   &#123;      </span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="comment">//定义可空类型</span></span><br><span class="line">          <span class="built_in">double</span>? num1 = <span class="literal">null</span>;</span><br><span class="line">          <span class="built_in">double</span>? num2 = <span class="number">3.14157</span>;</span><br><span class="line">          <span class="built_in">double</span> num3;</span><br><span class="line">          <span class="comment">//如果第一个操作数的值为 null，则运算符返回第二个操作数的值，否则返回第一个操作数的值</span></span><br><span class="line">          num3 = num1 ?? <span class="number">5.34</span>;</span><br><span class="line">          Console.WriteLine(<span class="string">&quot;num3 的值： &#123;0&#125;&quot;</span>, num3);</span><br><span class="line">          num3 = num2 ?? <span class="number">5.34</span>;</span><br><span class="line">          Console.WriteLine(<span class="string">&quot;num3 的值： &#123;0&#125;&quot;</span>, num3);</span><br><span class="line">          Console.ReadLine();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、流程控制语句"><a href="#三、流程控制语句" class="headerlink" title="三、流程控制语句"></a>三、流程控制语句</h1><h2 id="3-1-选择结构"><a href="#3-1-选择结构" class="headerlink" title="3.1 选择结构"></a>3.1 选择结构</h2><h3 id="3-1-1-单-if-语句"><a href="#3-1-1-单-if-语句" class="headerlink" title="3.1.1 单 if 语句"></a>3.1.1 单 if 语句</h3><p>具体语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(逻辑表达式)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">/* 如果逻辑表达式为真将执行的语句 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2-if-else-语句"><a href="#3-1-2-if-else-语句" class="headerlink" title="3.1.2 if/else 语句"></a>3.1.2 if/else 语句</h3><p>具体语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(boolean_expression)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">/* 如果布尔表达式为真将执行的语句 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* 如果布尔表达式为假将执行的语句 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-3-switch-语句"><a href="#3-1-3-switch-语句" class="headerlink" title="3.1.3 switch 语句"></a>3.1.3 switch 语句</h3><p>具体语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> constant-expression:</span><br><span class="line">       statement(s);</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> constant-expression:</span><br><span class="line">       statement(s);</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">/* 您可以有任意数量的 case 语句 */</span></span><br><span class="line">    <span class="literal">default</span> : <span class="comment">/* 默认执行（除了上面情况之外） */</span></span><br><span class="line">       statement(s);</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>switch</code>语句必须遵循下面的规则：</p><ul><li><code>case</code> 的<code>constant-expression</code>必须与<code>switch</code>中的变量具有相同的数据类型，且必须是一个常量。</li><li>当遇到<code>break</code>语句时，<code>switch</code>终止，控制流将跳转到 <code>switch</code> 语句后的下一行。</li><li>C# 不允许从一个开关部分继续执行到下一个开关部分。如果 <code>case</code> 语句中有处理语句，则必须包含<code>break</code>或其他跳转语句。</li></ul><h3 id="3-1-4-三目运算符"><a href="#3-1-4-三目运算符" class="headerlink" title="3.1.4 三目运算符"></a>3.1.4 三目运算符</h3><p>具体语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">逻辑表达式 ? Exp2 : Exp3</span><br></pre></td></tr></table></figure><p>请注意，冒号的使用和位置。 <code>?</code> 表达式的值是由<strong>逻辑表达式</strong>决定的。</p><ul><li>如果逻辑表达式为真，则计算 Exp2 的值，结果即为整个 ? 表达式的值</li><li>如果逻辑表达式为假，则计算 Exp3 的值，结果即为整个 ? 表达式的值</li></ul><h2 id="3-2-循环结构"><a href="#3-2-循环结构" class="headerlink" title="3.2 循环结构"></a>3.2 循环结构</h2><h3 id="3-2-1-while-语句"><a href="#3-2-1-while-语句" class="headerlink" title="3.2.1 while 语句"></a>3.2.1 while 语句</h3><p>具体语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(逻辑表达式/循环条件)</span><br><span class="line">&#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先进行判断，满足判断条件后再循环。</p><h3 id="3-2-2-do-while-语句"><a href="#3-2-2-do-while-语句" class="headerlink" title="3.2.2 do-while 语句"></a>3.2.2 do-while 语句</h3><p>具体语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;<span class="keyword">while</span>(逻辑表达式/循环条件);</span><br></pre></td></tr></table></figure><p>先进行循环，然后判断是否继续循环。</p><h3 id="3-2-3-for-语句"><a href="#3-2-3-for-语句" class="headerlink" title="3.2.3 for 语句"></a>3.2.3 for 语句</h3><p>具体语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(表达式<span class="number">1</span>;表达式<span class="number">2</span>;表达式<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//表达式1一般为声明循环变量</span></span><br><span class="line"><span class="comment">//循环条件</span></span><br><span class="line"><span class="comment">//改变循环条件</span></span><br></pre></td></tr></table></figure><h3 id="3-2-4-循环控制语句"><a href="#3-2-4-循环控制语句" class="headerlink" title="3.2.4 循环控制语句"></a>3.2.4 循环控制语句</h3><ol><li><code>break</code>：跳出当前循环，如果有循环的嵌套，那么只会跳出<strong>一层</strong>循环</li><li><code>continue</code>：立即结束<strong>本次</strong>循环，然后判断循环条件，如果成立，则进入下一次循环，否则退出循环</li></ol><h1 id="四、复杂数据类型"><a href="#四、复杂数据类型" class="headerlink" title="四、复杂数据类型"></a>四、复杂数据类型</h1><h2 id="4-1-字符串"><a href="#4-1-字符串" class="headerlink" title="4.1 字符串"></a>4.1 字符串</h2><p>字符串是引用类型。在 C# 中，您可以使用<strong>字符数组</strong>来表示字符串。但是，更常见的做法是使用 <code>string</code> 关键字来声明一个字符串变量。</p><h3 id="4-1-1-创建-String-对象"><a href="#4-1-1-创建-String-对象" class="headerlink" title="4.1.1 创建 String 对象"></a>4.1.1 创建 String 对象</h3><p>您可以使用以下方法之一来创建 string 对象：</p><ul><li>通过给 <code>String</code> 变量指定一个字符串</li><li>通过使用 <code>String</code> 类构造函数</li><li>通过使用字符串串联运算符（ + ）</li><li>通过检索属性或调用一个返回字符串的方法</li><li>通过<strong>格式化方法</strong>来转换一个值或对象为它的字符串表示形式</li></ul><p>具体代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">StringApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">//字符串，字符串连接</span></span><br><span class="line">            <span class="built_in">string</span> fname, lname;</span><br><span class="line">            fname = <span class="string">&quot;Rowan&quot;</span>;</span><br><span class="line">            lname = <span class="string">&quot;Atkinson&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> fullname = fname + lname;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Full Name: &#123;0&#125;&quot;</span>, fullname);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过使用 string 构造函数</span></span><br><span class="line">            <span class="built_in">string</span> greetings = <span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Greetings: &#123;0&#125;&quot;</span>, greetings);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//方法返回字符串</span></span><br><span class="line">            <span class="built_in">string</span>[] sarray = &#123; <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;From&quot;</span>, <span class="string">&quot;Tutorials&quot;</span>, <span class="string">&quot;Point&quot;</span> &#125;;</span><br><span class="line">            <span class="built_in">string</span> message = String.Join(<span class="string">&quot; &quot;</span>, sarray);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Message: &#123;0&#125;&quot;</span>, message);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//用于转化值的格式化方法</span></span><br><span class="line">            DateTime waiting = <span class="keyword">new</span> DateTime(<span class="number">2012</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">58</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">string</span> chat = String.Format(<span class="string">&quot;Message sent at &#123;0:t&#125; on &#123;0:D&#125;&quot;</span>,</span><br><span class="line">            waiting);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Message: &#123;0&#125;&quot;</span>, chat);</span><br><span class="line">            Console.ReadKey() ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-2-String-类的属性"><a href="#4-1-2-String-类的属性" class="headerlink" title="4.1.2 String 类的属性"></a>4.1.2 String 类的属性</h3><p><code>String</code> 类有以下两个常用属性：</p><div class="table-container"><table><thead><tr><th style="text-align:center">属性名称</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">Chars</td><td style="text-align:left">在当前 <em>String</em> 对象中获取 <em>Char</em> 对象的指定位置。</td></tr><tr><td style="text-align:center">Length</td><td style="text-align:left">在当前的 <em>String</em> 对象中获取字符数。</td></tr></tbody></table></div><h3 id="4-1-3-String-类的方法"><a href="#4-1-3-String-类的方法" class="headerlink" title="4.1.3 String 类的方法"></a>4.1.3 String 类的方法</h3><p>具体可以参考：<a href="https://www.runoob.com/csharp/csharp-string.html">C# 字符串（String） | 菜鸟教程 (runoob.com)</a>。</p><h2 id="4-2-数组"><a href="#4-2-数组" class="headerlink" title="4.2 数组"></a>4.2 数组</h2><p>数组是一个引用类型。数组是一个存储相同类型元素的固定大小的顺序集合。数组是用来存储数据的集合，通常认为数组是一个同一类型变量的集合。</p><h3 id="4-2-1-声明数组"><a href="#4-2-1-声明数组" class="headerlink" title="4.2.1 声明数组"></a>4.2.1 声明数组</h3><p>在 C# 中声明一个数组，您可以使用下面的语法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">datatype[] arrayName;</span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line"><span class="built_in">int</span>[] id;</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>datatype</code>用于指定被存储在数组中的元素的类型</li><li><code>[ ]</code>指定数组的秩（维度）。秩指定数组的大小</li><li><code>arrayName</code> 指定数组的名称</li></ul><h3 id="4-2-2-初始化数组"><a href="#4-2-2-初始化数组" class="headerlink" title="4.2.2 初始化数组"></a>4.2.2 初始化数组</h3><p>声明一个数组不会在内存中初始化数组。当初始化数组变量时，您可以赋值给数组。数组是一个引用类型，所以您需要使用 <strong>new</strong> 关键字来创建数组的实例。</p><p>例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span>[] balance = <span class="keyword">new</span> <span class="built_in">double</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><h3 id="4-2-3-赋值给数组"><a href="#4-2-3-赋值给数组" class="headerlink" title="4.2.3 赋值给数组"></a>4.2.3 赋值给数组</h3><p>您可以通过使用索引号赋值给一个单独的数组元素，比如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span>[] balance = <span class="keyword">new</span> <span class="built_in">double</span>[<span class="number">10</span>];</span><br><span class="line">balance[<span class="number">0</span>] = <span class="number">4500.0</span>;</span><br></pre></td></tr></table></figure><p>您可以在声明数组的同时给数组赋值，比如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span>[] balance = &#123; <span class="number">2340.0</span>, <span class="number">4523.69</span>, <span class="number">3421.0</span>&#125;;</span><br></pre></td></tr></table></figure><p>您也可以创建并初始化一个数组，比如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> [] marks = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>]  &#123; <span class="number">99</span>,  <span class="number">98</span>, <span class="number">92</span>, <span class="number">97</span>, <span class="number">95</span>&#125;;</span><br></pre></td></tr></table></figure><p>在上述情况下，你也可以省略数组的大小，比如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> [] marks = <span class="keyword">new</span> <span class="built_in">int</span>[]  &#123; <span class="number">99</span>,  <span class="number">98</span>, <span class="number">92</span>, <span class="number">97</span>, <span class="number">95</span>&#125;;</span><br></pre></td></tr></table></figure><p>您也可以赋值一个数组变量到另一个目标数组变量中。在这种情况下，目标和源会指向相同的内存位置：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> [] marks = <span class="keyword">new</span> <span class="built_in">int</span>[]  &#123; <span class="number">99</span>,  <span class="number">98</span>, <span class="number">92</span>, <span class="number">97</span>, <span class="number">95</span>&#125;;</span><br><span class="line"><span class="built_in">int</span>[] score = marks;</span><br></pre></td></tr></table></figure><p>当您创建一个数组时，C# 编译器会根据数组类型隐式初始化每个数组元素为一个默认值。例如，int 数组的所有元素都会被初始化为 0。</p><h3 id="4-2-4-访问数组元素"><a href="#4-2-4-访问数组元素" class="headerlink" title="4.2.4 访问数组元素"></a>4.2.4 访问数组元素</h3><p>元素是通过带索引的数组名称来访问的。这是通过把元素的索引放置在数组名称后的方括号中来实现的。例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">double</span> salary = balance[<span class="number">9</span>];</span><br></pre></td></tr></table></figure><h2 id="4-3-枚举"><a href="#4-3-枚举" class="headerlink" title="4.3 枚举"></a>4.3 枚举</h2><p>枚举是值类型。enum：枚举的关键字，声明枚举的关键字。具体语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line">[<span class="meta">public</span>] <span class="built_in">enum</span> 枚举名</span><br><span class="line">&#123;</span><br><span class="line">    值<span class="number">1</span>,</span><br><span class="line">    值<span class="number">2</span>,</span><br><span class="line">    值<span class="number">3</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">enum</span> Gender</span><br><span class="line">&#123;</span><br><span class="line">    男,</span><br><span class="line">    女</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">Gender gender = Gender.男;</span><br></pre></td></tr></table></figure><h2 id="4-4-结构体"><a href="#4-4-结构体" class="headerlink" title="4.4 结构体"></a>4.4 结构体</h2><p>在 C# 中，结构体是<strong>值类型</strong>数据结构。它使得一个单一变量可以存储各种数据类型的相关数据。<code>struct</code>关键字用于创建结构体。结构体是用来代表一个记录。</p><h3 id="4-4-1-构造结构体"><a href="#4-4-1-构造结构体" class="headerlink" title="4.4.1 构造结构体"></a>4.4.1 构造结构体</h3><p>具体语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">public</span>] <span class="keyword">struct</span> 结构名</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> 成员;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-2-C-结构的特点"><a href="#4-4-2-C-结构的特点" class="headerlink" title="4.4.2 C# 结构的特点"></a>4.4.2 C# 结构的特点</h3><p>在 C# 中的结构与传统的 C 或 C++ 中的结构不同。C# 中的结构有以下特点：</p><ul><li>结构可带有方法、字段、索引、属性、运算符方法和事件。</li><li>结构可定义构造函数，但不能定义析构函数。但是，您不能为结构定义无参构造函数。无参构造函数(默认)是自动定义的，且不能被改变。</li><li>与类不同，结构不能继承其他的结构或类。</li><li>结构不能作为其他结构或类的基础结构。</li><li>结构可实现一个或多个接口。</li><li>结构成员不能指定为 abstract、virtual 或 protected。</li><li>当您使用 <strong>New</strong> 操作符创建一个结构对象时，会调用适当的构造函数来创建结构。与类不同，结构可以不使用 New 操作符即可被实例化。</li><li>如果不使用 New 操作符，只有在所有的字段都被初始化之后，字段才被赋值，对象才被使用。</li></ul><h1 id="五、函数-方法"><a href="#五、函数-方法" class="headerlink" title="五、函数/方法"></a>五、函数/方法</h1><p>一个方法是把一些相关的语句组织在一起，用来执行一个任务的语句块。每一个 C# 程序至少有一个带有 Main 方法的类。</p><h2 id="5-1-定义方法"><a href="#5-1-定义方法" class="headerlink" title="5.1 定义方法"></a>5.1 定义方法</h2><p>基本语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[访问修饰符] [<span class="keyword">static</span>] 返回值类型 方法名([形式参数列表])</span><br><span class="line">&#123;</span><br><span class="line">    方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-调用方法"><a href="#5-2-调用方法" class="headerlink" title="5.2 调用方法"></a>5.2 调用方法</h2><p>基本语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类名.方法名([实际参数列表]);<span class="comment">//当方法和主函数在同一类下，则不用添加类名</span></span><br><span class="line">对象.方法名([实际参数列表]);</span><br></pre></td></tr></table></figure><h2 id="5-3-函数的递归"><a href="#5-3-函数的递归" class="headerlink" title="5.3 函数的递归"></a>5.3 函数的递归</h2><p>一个方法可以自我调用。这就是所谓的 <strong>递归</strong>。</p><blockquote><p>应当在工程中，避免使用递归方法。因为递归方法</p></blockquote><h2 id="5-4-参数传递与💗高级参数💗"><a href="#5-4-参数传递与💗高级参数💗" class="headerlink" title="5.4 参数传递与💗高级参数💗"></a>5.4 参数传递与💗<code>高级参数</code>💗</h2><div class="table-container"><table><thead><tr><th style="text-align:center">方式</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">值参数</td><td style="text-align:left">这种方式复制参数的实际值给函数的形式参数，实参和形参使用的是两个不同内存中的值。在这种情况下，当形参的值发生改变时，不会影响实参的值，从而保证了实参数据的安全。</td></tr><tr><td style="text-align:center">引用参数</td><td style="text-align:left">这种方式复制参数的内存位置的引用给形式参数。这意味着，当形参的值发生改变时，同时也改变实参的值。</td></tr><tr><td style="text-align:center">输出参数</td><td style="text-align:left">这种方式可以返回多个值。</td></tr></tbody></table></div><h3 id="5-4-1-按值传递参数"><a href="#5-4-1-按值传递参数" class="headerlink" title="5.4.1 按值传递参数"></a>5.4.1 按值传递参数</h3><p>这是参数传递的默认方式。在这种方式下，当调用一个方法时，会为每个值参数创建一个新的存储位置。</p><p>实际参数的值会复制给形参，实参和形参使用的是两个不同内存中的值。所以，当形参的值发生改变时，不会影响实参的值，从而保证了实参数据的安全。</p><p>例如下面代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">Add10</span>(<span class="params"><span class="built_in">int</span> a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    a = a+<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> a,b,c;</span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    b = Add10(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们把实际参数 a 传入到函数 Add10(a) 中去，在该函数中，对形式参数 a 进行赋值计算，但是形参 a 改变没有影响实参 a ，它们两个使用不同的内存空间。</p><h3 id="5-4-2-按引用传递参数——ref"><a href="#5-4-2-按引用传递参数——ref" class="headerlink" title="5.4.2 按引用传递参数——ref"></a>5.4.2 按引用传递参数——ref</h3><p>引用参数是一个对变量的<strong>内存位置的引用</strong>。当按引用传递参数时，与值参数不同的是，它不会为这些参数创建一个新的存储位置。引用参数表示与提供给方法的实际参数具有相同的内存位置。在 C# 中，使用 <code>ref</code> 关键字声明引用参数。</p><p>在以下示例中，<code>p</code>和<code>x</code>指的是相同的存储器位置：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Test</span> &#123; </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myMethod</span> (<span class="params"><span class="keyword">ref</span> <span class="built_in">int</span> p</span>)</span> &#123;</span><br><span class="line">       p = p + <span class="number">1</span>;             <span class="comment">// Increment p by 1 </span></span><br><span class="line">       Console.WriteLine (p); <span class="comment">// Write p to screen </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span>&#123; </span><br><span class="line">        <span class="built_in">int</span> x = <span class="number">8</span>; </span><br><span class="line">        myMethod (<span class="keyword">ref</span> x);      <span class="comment">// Ask myMethod to deal directly with x </span></span><br><span class="line">        Console.WriteLine (x); <span class="comment">// x is now 9 </span></span><br><span class="line">     &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="5-4-3-按输出传递参数——out"><a href="#5-4-3-按输出传递参数——out" class="headerlink" title="5.4.3 按输出传递参数——out"></a>5.4.3 按输出传递参数——out</h3><p>return 语句可用于只从函数中返回一个值。但是，可以使用 <strong>输出参数</strong> 来从函数中返回两个或多个值。输出参数会把方法输出的数据赋给自己，其他方面与引用参数相似。</p><p>out参数就像一个<code>ref</code>参数，但是它:</p><ul><li>在进入函数之前不需要赋值</li><li><strong>必须在它出来的函数之前赋值</strong></li><li>out 修饰符用于从方法获取多个返回值。</li></ul><p>例如下面代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Test</span> </span><br><span class="line">&#123; </span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ToWords</span> (<span class="params"><span class="built_in">string</span> name, <span class="keyword">out</span> <span class="built_in">string</span> firstNames, <span class="keyword">out</span> <span class="built_in">string</span> lastName</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">//out参数要求在方法的内部必须为其赋值</span></span><br><span class="line">       <span class="built_in">int</span> i = name.LastIndexOf (<span class="string">&quot; &quot;</span>);</span><br><span class="line">       firstNames = name.Substring (<span class="number">0</span>, i);</span><br><span class="line">       lastName = name.Substring (i + <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> a, b;</span><br><span class="line">        ToWords(<span class="string">&quot;this is a test&quot;</span>, <span class="keyword">out</span> a, <span class="keyword">out</span> b);</span><br><span class="line">        Console.WriteLine (a);</span><br><span class="line">        Console.WriteLine (b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-4-params-修饰符"><a href="#5-4-4-params-修饰符" class="headerlink" title="5.4.4  params 修饰符"></a>5.4.4  params 修饰符</h3><p>将实参列表中跟可变参数数组类型一致的元素都当作数组的元素去处理。<code>params</code>参数修饰符用于方法的<strong>最后一个参数</strong>，以便该方法接受任意数量的特定类型的参数。</p><p>参数类型必须声明为数组。</p><p>例如下面代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Test</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Sum</span> (<span class="params"><span class="keyword">params</span> <span class="built_in">int</span>[] ints</span>)</span> </span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">int</span> sum = <span class="number">0</span>; </span><br><span class="line">       <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; ints.Length; i++) </span><br><span class="line">       &#123;</span><br><span class="line">          sum += ints[i]; <span class="comment">// Increase sum by ints[i] </span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> sum; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123; </span><br><span class="line">        <span class="built_in">int</span> total = Sum (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        Console.WriteLine (total); <span class="comment">// 10</span></span><br><span class="line">        <span class="built_in">int</span> total = Sum (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>，<span class="number">5</span>);</span><br><span class="line">        Console.WriteLine (total); <span class="comment">// 15</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-5-命名参数"><a href="#5-4-5-命名参数" class="headerlink" title="5.4.5 命名参数"></a>5.4.5 命名参数</h3><p>我们可以通过名称识别参数，参考 Python 的位置参数。例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myMethod</span> (<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span> </span><br><span class="line">&#123; </span><br><span class="line">   Console.WriteLine (x + <span class="string">&quot;, &quot;</span> + y); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test</span>()</span> </span><br><span class="line">&#123;</span><br><span class="line">   myMethod (x:<span class="number">1</span>, y:<span class="number">2</span>); <span class="comment">// 1, 2 </span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="六、面向对象——类"><a href="#六、面向对象——类" class="headerlink" title="六、面向对象——类"></a>六、面向对象——类</h1><h2 id="6-1-类的成员"><a href="#6-1-类的成员" class="headerlink" title="6.1 类的成员"></a>6.1 类的成员</h2><p>C#中，类有三个成员：</p><ul><li>字段<ul><li>静态</li><li>非静态</li></ul></li><li>属性<ul><li>静态</li><li>非静态</li></ul></li><li>方法/函数<ul><li>构造方法</li><li>自定义方法</li><li>析构函数</li></ul></li></ul><p>一般格式如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">public</span>] [<span class="keyword">static</span>] <span class="keyword">class</span> <span class="title">ClassName</span>[&lt;泛型&gt;] [:<span class="title">Father</span>]</span><br><span class="line">&#123;</span><br><span class="line">    [字段];</span><br><span class="line">    [属性];</span><br><span class="line">    [方法];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>类名命名规则符合 Pascal 规范。每个单词的首字母都要大写，其余字母小写。比如：MyFirstClass</li><li>静态类和动态类有区别，成员也有就静态和动态的区别，默认为私有、动态类。（这里在随后进行详细说明）</li><li>如果要访问类的成员，你要使用点（.）运算符。</li><li>点运算符链接了对象（或类）的名称和成员的名称。</li></ol><h3 id="6-1-1-字段"><a href="#6-1-1-字段" class="headerlink" title="6.1.1 字段"></a>6.1.1 字段</h3><p>字段是在类或结构中直接声明的任意类型的变量。 字段是其包含类型的成员。</p><p>字段(field) 用来存储数值或对象的真正实体</p><p>注意：</p><ul><li><p>命名规则：</p><ul><li>Camel。骆驼命名规范。变量名中首单词的首字母要小写，其余单词的首字母要大写。</li><li>类的字段一般以<strong>下划线</strong>开头。</li></ul></li></ul><h3 id="6-1-2-属性"><a href="#6-1-2-属性" class="headerlink" title="6.1.2 属性"></a>6.1.2 属性</h3><p>属性从外部看起来像字段，但在内部它们包含逻辑。一个属性被声明为一个字段，但是添加了一个get / set块。</p><p>以下是如何实现CurrentPrice作为属性：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Product</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">decimal</span> _currentPrice;       <span class="comment">// The private &quot;backing&quot; field、</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">decimal</span> CurrentPrice <span class="comment">// The public property </span></span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">get</span> &#123; </span><br><span class="line">           <span class="keyword">return</span> _currentPrice; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">set</span> &#123; </span><br><span class="line">          _currentPrice = <span class="keyword">value</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>属性的作用：保护字段，对字段的赋值、取值进行限定</p><ul><li>当给属性赋值时，会执行set方法</li><li>当给属性输出时，会执行get方法</li></ul><p>注意：</p><ul><li>命名规则符合Pascal规范。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> C# </tag>
            
            <tag> 程序设计 </tag>
            
            <tag> .NET </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构C语言版</title>
      <link href="/2023/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84C%E8%AF%AD%E8%A8%80%E7%89%88/"/>
      <url>/2023/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84C%E8%AF%AD%E8%A8%80%E7%89%88/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大学学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计 </tag>
            
            <tag> 大学学习 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
