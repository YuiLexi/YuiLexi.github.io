<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C#基础知识</title>
      <link href="/2023/04/26/Csharp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/04/26/Csharp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> C# </tag>
            
            <tag> 程序设计 </tag>
            
            <tag> .NET </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构C语言版</title>
      <link href="/2023/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84C%E8%AF%AD%E8%A8%80%E7%89%88/"/>
      <url>/2023/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84C%E8%AF%AD%E8%A8%80%E7%89%88/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大学学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 程序设计 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与数据库</title>
      <link href="/2023/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BB%A3%E7%A0%81/"/>
      <url>/2023/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1 环境"></a>1 环境</h2><h3 id="1-1-C语言"><a href="#1-1-C语言" class="headerlink" title="1.1 C语言"></a>1.1 C语言</h3><h4 id="1-1-1-工具"><a href="#1-1-1-工具" class="headerlink" title="1.1.1 工具"></a>1.1.1 工具</h4><p>Visiual Studio 2022</p><h4 id="1-1-2-项目结构"><a href="#1-1-2-项目结构" class="headerlink" title="1.1.2 项目结构"></a>1.1.2 项目结构</h4><p>解决方案：→项目1：C_Test01</p><ul><li><p>头文件</p><ul><li><p>FileName.h</p></li><li><p>FileName.c</p></li></ul></li></ul><ul><li><p>源文件</p><ul><li>main.c</li></ul></li></ul><ul><li><p>资源文件</p><ul><li>Input.txt</li><li>Output.txt</li></ul></li></ul><h4 id="1-1-3-头文件"><a href="#1-1-3-头文件" class="headerlink" title="1.1.3 头文件"></a>1.1.3 头文件</h4><ul><li><p>Array头文件：存放数组矩阵相关的函数</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Array.h文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __FUNC_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __FUNC_H__</span></span><br><span class="line"><span class="type">int</span>** <span class="title function_">readMatrix</span><span class="params">(<span class="type">char</span> path[], <span class="type">int</span> row, <span class="type">int</span> <span class="built_in">list</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// __FUNC_H__</span></span></span><br></pre></td></tr></table></figure>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS <span class="comment">//消除不安全函数的警告</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Array.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 通过传入的路径，寻找到矩阵数据文件；根据输入的矩阵的行、列数读取矩阵文件中的数据，并返回一个二重指针，指向矩阵数据构成的二维数组</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;path&quot;&gt;矩阵文件路径&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;row&quot;&gt;矩阵的行数&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;list&quot;&gt;矩阵的列数&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="type">int</span>** <span class="title function_">readMatrix</span><span class="params">(<span class="type">char</span> path[], <span class="type">int</span> row, <span class="type">int</span> <span class="built_in">list</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* fp;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="comment">//创建动态内存，存储外部文件中的矩阵</span></span><br><span class="line"><span class="type">int</span>** dp = (<span class="type">int</span>**)<span class="built_in">malloc</span>(row * <span class="keyword">sizeof</span>(<span class="type">int</span>*));</span><br><span class="line"><span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; <span class="built_in">list</span>; a++)</span><br><span class="line">&#123;</span><br><span class="line">dp[a] = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="built_in">list</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只读方式打开矩阵数据外部文件</span></span><br><span class="line">fp = fopen(path, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; row; a++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (b = <span class="number">0</span>; b &lt; <span class="built_in">list</span>; b++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fscanf</span>(fp, <span class="string">&quot;%d&quot;</span>, &amp;dp[a][b]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="keyword">return</span> dp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li></li></ul><h1 id="四、数组"><a href="#四、数组" class="headerlink" title="四、数组"></a>四、数组</h1><h2 id="4-3-矩阵的压缩存储"><a href="#4-3-矩阵的压缩存储" class="headerlink" title="4.3 矩阵的压缩存储"></a>4.3 矩阵的压缩存储</h2><h3 id="4-3-1-对称矩阵"><a href="#4-3-1-对称矩阵" class="headerlink" title="4.3.1 对称矩阵"></a>4.3.1 对称矩阵</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS <span class="comment">//消除不安全函数的警告</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Array.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> rowNum = <span class="number">0</span>, listNum = <span class="number">0</span>, num = <span class="number">0</span>;<span class="comment">//行列数以及下三角元素的个数</span></span><br><span class="line"><span class="type">char</span> inputPath[] = <span class="string">&quot;Input.txt&quot;</span>;</span><br><span class="line"><span class="type">char</span> outputPath[] = <span class="string">&quot;Output.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line"><span class="type">int</span>** idp;</span><br><span class="line"><span class="type">int</span>* dp;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入行数、列数：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;rowNum, &amp;listNum);</span><br><span class="line"><span class="comment">//读取数据</span></span><br><span class="line">idp = readMatrix(inputPath, rowNum, listNum);</span><br><span class="line"></span><br><span class="line">num = (listNum + <span class="number">1</span>) * rowNum / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">dp = (<span class="type">int</span>*)<span class="built_in">malloc</span>(num * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"></span><br><span class="line">c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; rowNum; a++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (b = <span class="number">0</span>; b &lt; a + <span class="number">1</span>; b++)</span><br><span class="line">&#123;</span><br><span class="line">dp[c] = idp[a][b];</span><br><span class="line">c++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出压缩后的数组</span></span><br><span class="line"><span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; num; a++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d   &quot;</span>, dp[a]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-2-三角矩阵"><a href="#4-3-2-三角矩阵" class="headerlink" title="4.3.2 三角矩阵"></a>4.3.2 三角矩阵</h3><h4 id="下三角矩阵"><a href="#下三角矩阵" class="headerlink" title="下三角矩阵"></a>下三角矩阵</h4><p>这个压缩方法与对称矩阵相同，这里仿照对称矩阵即可。</p><h3 id="4-3-4-稀疏矩阵"><a href="#4-3-4-稀疏矩阵" class="headerlink" title="4.3.4 稀疏矩阵"></a>4.3.4 稀疏矩阵</h3><h4 id="4-3-4-1-顺序存储结构"><a href="#4-3-4-1-顺序存储结构" class="headerlink" title="4.3.4.1 顺序存储结构"></a>4.3.4.1 顺序存储结构</h4><h5 id="4-3-4-1-1-三元组表"><a href="#4-3-4-1-1-三元组表" class="headerlink" title="4.3.4.1.1 三元组表"></a>4.3.4.1.1 三元组表</h5><p>构建三元组表的代码：这个代码使用相对复杂的算法，只需改变外部文件的矩阵数据，并输入行、列、非零元数，即可自动查找并输出三元组表。还有更简单的写法，但是会每次手动输入非零元。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS <span class="comment">//消除不安全函数的警告</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Array.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//三元组表结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> i, j, v;</span><br><span class="line">&#125;JD3;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义全局变量，行、列、非零元数，以及输入输出文件路径，保证在该程序中只会存在一份数据</span></span><br><span class="line"><span class="type">int</span> rowNum, listNum, notZeroNUm;</span><br><span class="line"><span class="type">char</span> inputPath[] = <span class="string">&quot;Input.txt&quot;</span>;</span><br><span class="line"><span class="type">char</span> outputPath[] = <span class="string">&quot;Output.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, c = <span class="number">1</span>;</span><br><span class="line">JD3* jdp;</span><br><span class="line"><span class="type">int</span>** dp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入行数、列数以及非零元个数：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;rowNum, &amp;listNum, &amp;notZeroNUm);</span><br><span class="line">    <span class="comment">//读取外部文件中的数据</span></span><br><span class="line">dp = readMatrix(inputPath, rowNum, listNum);</span><br><span class="line"><span class="comment">//创建结构体数组-三元组表</span></span><br><span class="line">jdp = (JD3*)<span class="built_in">malloc</span>((notZeroNUm + <span class="number">1</span>) * <span class="keyword">sizeof</span>(JD3));</span><br><span class="line"></span><br><span class="line">jdp[<span class="number">0</span>].i = rowNum; jdp[<span class="number">0</span>].j = listNum; jdp[<span class="number">0</span>].v = notZeroNUm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; rowNum; a++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (b = <span class="number">0</span>; b &lt; listNum; b++)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="comment">//找出非零元并付给三元组表</span></span><br><span class="line"><span class="keyword">if</span> (dp[a][b] != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">jdp[c].i = a; jdp[c].j = b; jdp[c].v = dp[a][b];</span><br><span class="line">c++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (c &gt; notZeroNUm)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//输出三元组表</span></span><br><span class="line"><span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; notZeroNUm + <span class="number">1</span>; a++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d  %d  %d  %d\n&quot;</span>, a, jdp[a].i, jdp[a].j, jdp[a].v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、树"><a href="#五、树" class="headerlink" title="五、树"></a>五、树</h1><h2 id="5-4-树的遍历"><a href="#5-4-树的遍历" class="headerlink" title="5.4 树的遍历"></a>5.4 树的遍历</h2><h3 id="5-4-1-二叉树的遍历"><a href="#5-4-1-二叉树的遍历" class="headerlink" title="5.4.1 二叉树的遍历"></a>5.4.1 二叉树的遍历</h3><p>🌟示例：中序遍历（左根右）求二叉树中的叶子节点数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS <span class="comment">//消除不安全函数的警告</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Bitree</span>* <span class="title">lchild</span>, * <span class="title">rchiled</span>;</span><span class="comment">//指向孩子结点的结构体</span></span><br><span class="line">&#125;Bitree;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;<span class="comment">//叶子数</span></span><br><span class="line">Bitree* fbp;<span class="comment">//指向第一个根结点的结构体，该结构体为二叉链表</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">countleaf</span><span class="params">(Bitree * bp, <span class="type">int</span> currentNum)</span>;</span><br><span class="line">count = countleaf(fbp, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">countleaf</span><span class="params">(Bitree* bp, <span class="type">int</span> currentNum)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = currentNum;</span><br><span class="line"><span class="comment">//左、中、右顺序遍历</span></span><br><span class="line"><span class="keyword">if</span> (bp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//判断左孩子结点，只有当前结点不存在，即 (*bp).lchild==NULL时，或者递归函数调用执行完毕，才会跳出这个函数</span></span><br><span class="line">a = countleaf((*bp).lchild, a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//当左右孩子都不存在时，该结点就是叶子</span></span><br><span class="line"><span class="keyword">if</span> ((*bp).lchild == <span class="literal">NULL</span> &amp;&amp; (*bp).rchiled == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">a = a + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> a;<span class="comment">//当前结点为叶子，就不需要判断右孩子，直接退出当前函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断右孩子</span></span><br><span class="line">a = countleaf((*bp).rchiled, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当前结点的结构体为NULL,或者为叶子，就会结束该函数，并输出当前叶子的计数个数</span></span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🌟示例：先序遍历求二叉树的深度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS <span class="comment">//消除不安全函数的警告</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Bitree</span>* <span class="title">lchild</span>, * <span class="title">rchiled</span>;</span><span class="comment">//指向孩子结点的结构体</span></span><br><span class="line">&#125;Bitree;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> depth = <span class="number">0</span>;<span class="comment">//树的深度</span></span><br><span class="line"><span class="type">int</span> currendepth = <span class="number">0</span>;<span class="comment">//当前遍历访问的结点的深度</span></span><br><span class="line">Bitree* fbp;</span><br><span class="line"></span><br><span class="line">Bitree fb;</span><br><span class="line">fbp = &amp;fb;<span class="comment">//指向树的根结点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">treedepth</span><span class="params">(Bitree * bp, <span class="type">int</span> currentd, <span class="type">int</span> currentTreeDepth)</span>;</span><br><span class="line"></span><br><span class="line">depth = treedepth(fbp, currendepth, depth);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">treedepth</span><span class="params">(Bitree* bp, <span class="type">int</span> currentd, <span class="type">int</span> currentTreeDepth)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> d = currentTreeDepth;<span class="comment">//存储当前所访问的树的深度</span></span><br><span class="line"><span class="type">int</span> l = currentd;<span class="comment">//存储当前结点的深度</span></span><br><span class="line"><span class="comment">//当前结点存在</span></span><br><span class="line"><span class="keyword">if</span> (bp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">l++;<span class="comment">//当前结点的深度+1</span></span><br><span class="line"><span class="keyword">if</span> (l &gt; d)</span><br><span class="line">&#123;</span><br><span class="line">d = l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">d = treedepth((*bp).lchild, l, d);</span><br><span class="line">d = treedepth((*bp).rchiled, l, d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大学学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 程序设计 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> C语言 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
