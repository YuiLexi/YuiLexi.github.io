<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C#基础知识</title>
      <link href="/2023/04/26/Csharp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/04/26/Csharp%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="一、认识-C"><a href="#一、认识-C" class="headerlink" title="一、认识 C"></a>一、认识 C</h1><h2 id="1-1-什么是-NET？"><a href="#1-1-什么是-NET？" class="headerlink" title="1.1 什么是 .NET？"></a>1.1 什么是 .NET？</h2><p>.NET 是由 Microsoft 创建的开源开发人员平台，用于生成许多不同类型的应用程序。使用 .NET，可以使用多种语言、编辑器和库来构建 Web、移动、桌面、游戏和 IoT 等。<a href="https://learn.microsoft.com/zh-cn/dotnet/">.NET 文档 | Microsoft Learn</a>。</p><ul><li><p>编程语言</p><p>  ​    可以使用 C#、F# 或 Visual Basic 编写 .NET 应用。<a href="https://dotnet.microsoft.com/zh-cn/languages">了解.NET 编程语言</a>。</p><ul><li>C# 是一种简单、现代、面向对象和类型安全的编程语言。</li><li><p>F# 是一种编程语言，利用它可轻松编写简洁、可靠且性能出色的代码。</p></li><li><p>Visual Basic 是一种易于使用的语言，简单语法便于生成类型安全、面向对象的应用。</p></li></ul></li><li><p>跨平台</p><p>  ​    无论是使用 C#、F# 还是 Visual Basic，代码都会在任何兼容的操作系统上本机运行。可以使用 .NET 生成多种类型的应用。有些是跨平台的，有些则针对特定的一组操作系统和设备。</p></li><li><p>一致的 API</p><p>  ​        .NET 提供一组标准的基类库和 API，这些库和 API 对所有 .NET 应用程序都是通用的。每个应用模型还可以公开特定于其运行的操作系统或它提供的功能的其他 API。例如，ASP.NET 是跨平台 Web 框架，它提供用于生成在 Linux 或 Windows 上运行的 Web 应用的其他 API。</p></li><li><p>库</p><p>  ​    为了扩展功能，Microsoft 和其他公司维护着一个正常的 .NET软件包生态系统。<a href="https://nuget.org/">NuGet</a>是专为包含了 100,000 多个包的 .NET 构建的包管理器。</p></li><li><p>应用程序模型</p><p>  ​    可以使用 .NET 生成多种类型的应用。为了帮助你更快地生成应用，应用模型基于基础库构建。</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">Web</th><th>为 Windows、Linux、macOS、Docker 构建 Web 应用和服务。</th></tr></thead><tbody><tr><td style="text-align:center">手机</td><td>使用单一代码库生成适用于 iOS、Android 和 Windows 等的本机移动应用。</td></tr><tr><td style="text-align:center">桌面</td><td>创建适用于 Windows 和 macOS 的本机应用，或使用 Web 技术生成随时随地运行的应用。</td></tr><tr><td style="text-align:center">微服务</td><td>创建可在 Docker 容器上运行的可独立部署的微服务。</td></tr><tr><td style="text-align:center">云</td><td>使用现有云服务，或创建和部署自己的云服务。</td></tr><tr><td style="text-align:center">机器学习</td><td>为应用添加视觉算法、语音处理、预测模型等。</td></tr><tr><td style="text-align:center">游戏开发</td><td>为最热门的台式机、手机和控制台开发 2D 和 3D 游戏。</td></tr><tr><td style="text-align:center">物联网</td><td>使用 Raspberry Pi 和其他单板计算机的本机支持创建 IoT 应用。</td></tr></tbody></table></div><h2 id="1-2-什么是-C-？"><a href="#1-2-什么是-C-？" class="headerlink" title="1.2 什么是 C#？"></a>1.2 什么是 C#？</h2><p>一种编程语言，可以开发基于.NET 平台的应用。</p><h2 id="1-3-NET两种交互模式"><a href="#1-3-NET两种交互模式" class="headerlink" title="1.3 .NET两种交互模式"></a>1.3 .NET两种交互模式</h2><ul><li>C/S：客户端（Client）/服务器（Server） 模式（需安装客户端软件）</li><li>B/S：浏览器（Browser）/服务器 模式（只需要浏览器）</li></ul><h2 id="1-4-开发工具"><a href="#1-4-开发工具" class="headerlink" title="1.4 开发工具"></a>1.4 开发工具</h2><ul><li><a href="https://visualstudio.microsoft.com/">Visual Studio</a></li></ul><h1 id="二、C-语法基础"><a href="#二、C-语法基础" class="headerlink" title="二、C#语法基础"></a>二、C#语法基础</h1><h2 id="2-1-C-程序一般结构"><a href="#2-1-C-程序一般结构" class="headerlink" title="2.1 C#程序一般结构"></a>2.1 C#程序一般结构</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System; <span class="comment">//调用命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//项目开始的地方</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line"><span class="comment">//构造命名空间，作用：区别相同名称但是作用不同的类</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">YourNamespace</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//构造类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">YourClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//字段</span></span><br><span class="line">        <span class="comment">//属性</span></span><br><span class="line">        <span class="comment">//构造方法</span></span><br><span class="line">        <span class="comment">//方法或函数</span></span><br><span class="line">        <span class="comment">//析构函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义结构体变量</span></span><br><span class="line">    <span class="keyword">struct</span> YourStruct</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义接口</span></span><br><span class="line">    <span class="keyword">interface</span> <span class="title">IYourInterface</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义委托类型</span></span><br><span class="line">    <span class="function"><span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">YourDelegate</span>()</span>;</span><br><span class="line">    <span class="comment">//枚举类型变量</span></span><br><span class="line">    <span class="built_in">enum</span> YourEnum</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//子命名空间</span></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title">YourNestedNamespace</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">struct</span> YourStruct</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>代码中出现的所有标点都是英文半角；</li><li>在 C# 代码中，每行代码的结束，都以<strong>分号</strong>结束。</li></ol><h2 id="2-2-注释"><a href="#2-2-注释" class="headerlink" title="2.2 注释"></a>2.2 注释</h2><ol><li><p>单行注释</p><p>​    一般放在<strong>代码语句</strong>的后面，或者放在<strong>代码块</strong>的前面。基本语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a;<span class="comment">//定义变量a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义变量 b，c</span></span><br><span class="line"><span class="built_in">int</span> b;</span><br><span class="line"><span class="built_in">int</span> c;</span><br></pre></td></tr></table></figure></li><li><p>多行注释</p><p>​    基本语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Console.WriteLine();</span></span><br><span class="line"><span class="comment">Console.ReadKey();</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>文本注释</p><p> ​    多用来解释类或方法的功能及参数。基本语法如下：</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span>text</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="2-3-基本数据类型"><a href="#2-3-基本数据类型" class="headerlink" title="2.3 基本数据类型"></a>2.3 基本数据类型</h2><p>在 C# 中，变量分为以下几种类型：</p><ul><li>值类型</li><li>引用类型</li><li>指针类型</li></ul><h3 id="2-3-1-值类型"><a href="#2-3-1-值类型" class="headerlink" title="2.3.1 值类型"></a>2.3.1 值类型</h3><p>​    它们是从类 <code>System.ValueType</code> 中派生的。值类型变量可以直接分配给一个值，即当前变量所在地址里的数据就是当前变量的值。值类型直接包含数据。</p><div class="table-container"><table><thead><tr><th style="text-align:center">关键字</th><th>描述</th><th>范围</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td style="text-align:center">sbyte</td><td>8 位有符号整数类型</td><td>-128 到 127</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">short</td><td>16 位有符号整数类型</td><td>-32,768 到 32,767</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"><strong>int</strong></td><td>32 位有符号整数类型</td><td>-2,147,483,648 到 2,147,483,647</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">long</td><td>64 位有符号整数类型</td><td>-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td><td style="text-align:center">0L</td></tr><tr><td style="text-align:center">byte</td><td>8 位无符号整数</td><td>0 到 255</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">ushort</td><td>16 位无符号整数类型</td><td>0 到 65,535</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">uint</td><td>32 位无符号整数类型</td><td>0 到 4,294,967,295</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">ulong</td><td>64 位无符号整数类型</td><td>0 到 18,446,744,073,709,551,615</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">float</td><td>32 位单精度浮点型</td><td>-3.4 x 1038 到 + 3.4 x 1038</td><td style="text-align:center">0.0F</td></tr><tr><td style="text-align:center">double</td><td>64 位双精度浮点型</td><td>(+/-)5.0 x 10-324 到 (+/-)1.7 x 10308</td><td style="text-align:center">0.0D</td></tr><tr><td style="text-align:center">decimal</td><td>128 位精确的十进制值，28-29 有效位数</td><td>(-7.9 x 1028 到 7.9 x 1028) / 100 到 28</td><td style="text-align:center">0.0M</td></tr><tr><td style="text-align:center">char</td><td>16 位 Unicode 字符</td><td>U +0000 到 U +ffff</td><td style="text-align:center">‘\0’</td></tr><tr><td style="text-align:center">bool</td><td>布尔值</td><td>true 或 false</td><td style="text-align:center">False</td></tr></tbody></table></div><blockquote><p>字符不可为空，字符只能存一个字符。</p></blockquote><p>如需得到一个类型或一个变量在特定平台上的准确字节大小，可以使用 <code>sizeof()</code> 方法。下面举例获取任何机器上 <code>int</code> 类型的字节大小：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DataTypeApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="keyword">sizeof</span>(<span class="built_in">int</span>));<span class="comment">//</span></span><br><span class="line">         Console.ReadLine();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值类型</p><h3 id="2-3-1-引用类型"><a href="#2-3-1-引用类型" class="headerlink" title="2.3.1 引用类型"></a>2.3.1 引用类型</h3><p>引用类型变量不包含存储在变量中的实际数据，但它们包含对变量的引用（地址）。换句话说，<strong>它们实际存储的是一个地址（栈区）</strong>，并指向变量的实际值所在的内存空间（堆区）。内置的引用类型有：<code>object</code>、<code>dynamic</code>和<code>string</code>。</p><ul><li><p>对象（Object）类型</p><p>  ​        <strong>对象</strong>：是所有数据类型的终极基类。Object 是 System.Object 类的别名。所以对象（Object）类型可以被分配任何其他类型（值类型、引用类型、预定义类型或用户自定义类型）的值。但是，在分配值之前，需要先进行类型转换。</p><ul><li>当一个值类型转换为对象类型时，则被称为<strong>装箱</strong>；</li><li>当一个对象类型转换为值类型时，则被称为<strong>拆箱</strong>。</li></ul></li><li><p>动态（Dynamic）类型</p><p>  ​    任何类型的值可以存储在动态数据类型变量中。这些变量的类型检查是在运行时发生的。声明动态类型的语法：</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dynamic</span> &lt;variable_name&gt; = <span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dynamic</span> d = <span class="number">20</span>;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> C# </tag>
            
            <tag> 程序设计 </tag>
            
            <tag> .NET </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构C语言版</title>
      <link href="/2023/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84C%E8%AF%AD%E8%A8%80%E7%89%88/"/>
      <url>/2023/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84C%E8%AF%AD%E8%A8%80%E7%89%88/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大学学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计 </tag>
            
            <tag> 大学学习 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
